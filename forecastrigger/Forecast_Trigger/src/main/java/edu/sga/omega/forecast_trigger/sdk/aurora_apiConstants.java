/**
 * Autogenerated by Thrift Compiler (0.9.3)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package edu.sga.omega.forecast_trigger.sdk;

import java.util.HashSet;
import java.util.Set;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class aurora_apiConstants {

    public static final String AURORA_EXECUTOR_NAME = "AuroraExecutor";

    public static final Set<ScheduleStatus> ACTIVE_STATES = new HashSet<ScheduleStatus>();
    public static final Set<ScheduleStatus> SLAVE_ASSIGNED_STATES = new HashSet<ScheduleStatus>();
    public static final Set<ScheduleStatus> LIVE_STATES = new HashSet<ScheduleStatus>();
    public static final Set<ScheduleStatus> TERMINAL_STATES = new HashSet<ScheduleStatus>();
    public static final String GOOD_IDENTIFIER_PATTERN = "^[\\w\\-\\.]+$";
    public static final String GOOD_IDENTIFIER_PATTERN_JVM = "^[\\w\\-\\.]+$";
    public static final String GOOD_IDENTIFIER_PATTERN_PYTHON = "^[\\w\\-\\.]+$";
    /**
     * States the job update can be in while still considered active.
     */
    public static final Set<JobUpdateStatus> ACTIVE_JOB_UPDATE_STATES = new HashSet<JobUpdateStatus>();
    public static final String BYPASS_LEADER_REDIRECT_HEADER_NAME = "Bypass-Leader-Redirect";
    public static final String TASK_FILESYSTEM_MOUNT_POINT = "taskfs";

    static {
        ACTIVE_STATES.add(ScheduleStatus.ASSIGNED);
        ACTIVE_STATES.add(ScheduleStatus.DRAINING);
        ACTIVE_STATES.add(ScheduleStatus.KILLING);
        ACTIVE_STATES.add(ScheduleStatus.PENDING);
        ACTIVE_STATES.add(ScheduleStatus.PREEMPTING);
        ACTIVE_STATES.add(ScheduleStatus.RESTARTING);
        ACTIVE_STATES.add(ScheduleStatus.RUNNING);
        ACTIVE_STATES.add(ScheduleStatus.STARTING);
        ACTIVE_STATES.add(ScheduleStatus.THROTTLED);
    }

    static {
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.ASSIGNED);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.DRAINING);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.KILLING);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.PREEMPTING);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.RESTARTING);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.RUNNING);
        SLAVE_ASSIGNED_STATES.add(ScheduleStatus.STARTING);
    }

    static {
        LIVE_STATES.add(ScheduleStatus.KILLING);
        LIVE_STATES.add(ScheduleStatus.PREEMPTING);
        LIVE_STATES.add(ScheduleStatus.RESTARTING);
        LIVE_STATES.add(ScheduleStatus.DRAINING);
        LIVE_STATES.add(ScheduleStatus.RUNNING);
    }

    static {
        TERMINAL_STATES.add(ScheduleStatus.FAILED);
        TERMINAL_STATES.add(ScheduleStatus.FINISHED);
        TERMINAL_STATES.add(ScheduleStatus.KILLED);
        TERMINAL_STATES.add(ScheduleStatus.LOST);
    }

    static {
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLLING_FORWARD);
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLLING_BACK);
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLL_FORWARD_PAUSED);
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLL_BACK_PAUSED);
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLL_FORWARD_AWAITING_PULSE);
        ACTIVE_JOB_UPDATE_STATES.add(JobUpdateStatus.ROLL_BACK_AWAITING_PULSE);
    }

}
